/* Generated By:JavaCC: Do not edit this line. AnalyzerConstants.java */

/** 
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface AnalyzerConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int classToken = 9;
  /** RegularExpression Id. */
  int publicToken = 10;
  /** RegularExpression Id. */
  int staticToken = 11;
  /** RegularExpression Id. */
  int voidToken = 12;
  /** RegularExpression Id. */
  int mainToken = 13;
  /** RegularExpression Id. */
  int stringToken = 14;
  /** RegularExpression Id. */
  int returnToken = 15;
  /** RegularExpression Id. */
  int extendsToken = 16;
  /** RegularExpression Id. */
  int intToken = 17;
  /** RegularExpression Id. */
  int booleanToken = 18;
  /** RegularExpression Id. */
  int floatToken = 19;
  /** RegularExpression Id. */
  int ifToken = 20;
  /** RegularExpression Id. */
  int elseToken = 21;
  /** RegularExpression Id. */
  int whileToken = 22;
  /** RegularExpression Id. */
  int trueToken = 23;
  /** RegularExpression Id. */
  int falseToken = 24;
  /** RegularExpression Id. */
  int thisToken = 25;
  /** RegularExpression Id. */
  int newToken = 26;
  /** RegularExpression Id. */
  int soutToken = 27;
  /** RegularExpression Id. */
  int lengthToken = 28;
  /** RegularExpression Id. */
  int openedBraceToken = 29;
  /** RegularExpression Id. */
  int closedBraceToken = 30;
  /** RegularExpression Id. */
  int openedParenthesisToken = 31;
  /** RegularExpression Id. */
  int closedParenthesisToken = 32;
  /** RegularExpression Id. */
  int openedCurlyBracketsToken = 33;
  /** RegularExpression Id. */
  int closedCurlyBracketsToken = 34;
  /** RegularExpression Id. */
  int semiColonToken = 35;
  /** RegularExpression Id. */
  int equalsToken = 36;
  /** RegularExpression Id. */
  int comparationToken = 37;
  /** RegularExpression Id. */
  int andToken = 38;
  /** RegularExpression Id. */
  int orToken = 39;
  /** RegularExpression Id. */
  int lessThanToken = 40;
  /** RegularExpression Id. */
  int moreThanToken = 41;
  /** RegularExpression Id. */
  int lessOrEqualThanToken = 42;
  /** RegularExpression Id. */
  int moreOrEqualThanToken = 43;
  /** RegularExpression Id. */
  int plusToken = 44;
  /** RegularExpression Id. */
  int minusToken = 45;
  /** RegularExpression Id. */
  int multiplicationToken = 46;
  /** RegularExpression Id. */
  int divisionToken = 47;
  /** RegularExpression Id. */
  int dotToken = 48;
  /** RegularExpression Id. */
  int commaToken = 49;
  /** RegularExpression Id. */
  int notToken = 50;
  /** RegularExpression Id. */
  int idToken = 51;
  /** RegularExpression Id. */
  int realConstToken = 52;
  /** RegularExpression Id. */
  int intConstToken = 53;
  /** RegularExpression Id. */
  int floatWithoutAnythingAfterPoint = 54;
  /** RegularExpression Id. */
  int floatWithoutAnythingBeforePoint = 55;
  /** RegularExpression Id. */
  int floatWithEntersBetweenDigits = 56;
  /** RegularExpression Id. */
  int iDStartsWithNumber = 57;
  /** RegularExpression Id. */
  int errorSymbNotIdent = 58;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int mlComment = 1;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\n\"",
    "\"\\t\"",
    "\"\\r\"",
    "<token of kind 5>",
    "\"/*\"",
    "\"*/\"",
    "<token of kind 8>",
    "\"class\"",
    "\"public\"",
    "\"static\"",
    "\"void\"",
    "\"main\"",
    "\"String\"",
    "\"return\"",
    "\"extends\"",
    "\"int\"",
    "\"boolean\"",
    "\"float\"",
    "\"if\"",
    "\"else\"",
    "\"while\"",
    "\"true\"",
    "\"false\"",
    "\"this\"",
    "\"new\"",
    "\"System.out.println\"",
    "\"length\"",
    "\"[\"",
    "\"]\"",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\";\"",
    "\"=\"",
    "\"==\"",
    "\"&&\"",
    "\"||\"",
    "\"<\"",
    "\">\"",
    "\"<=\"",
    "\">=\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\".\"",
    "\",\"",
    "\"!\"",
    "<idToken>",
    "<realConstToken>",
    "<intConstToken>",
    "<floatWithoutAnythingAfterPoint>",
    "<floatWithoutAnythingBeforePoint>",
    "<floatWithEntersBetweenDigits>",
    "<iDStartsWithNumber>",
    "<errorSymbNotIdent>",
  };

}
