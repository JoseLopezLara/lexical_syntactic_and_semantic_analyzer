/* Generated By:JavaCC: Do not edit this line. Analyzer.java */
public class Analyzer implements AnalyzerConstants {
    public static void main (String args[]) throws ParseException{
        Analyzer miniJavaAnalizer=new Analyzer(System.in);
        miniJavaAnalizer.analyzingInput();
    }

  static final public void analyzingInput() throws ParseException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case classToken:
        jj_consume_token(classToken);
        break;
      case publicToken:
        jj_consume_token(publicToken);
        break;
      case staticToken:
        jj_consume_token(staticToken);
        break;
      case voidToken:
        jj_consume_token(voidToken);
        break;
      case mainToken:
        jj_consume_token(mainToken);
        break;
      case stringToken:
        jj_consume_token(stringToken);
        break;
      case returnToken:
        jj_consume_token(returnToken);
        break;
      case extendsToken:
        jj_consume_token(extendsToken);
        break;
      case intToken:
        jj_consume_token(intToken);
        break;
      case booleanToken:
        jj_consume_token(booleanToken);
        break;
      case floatToken:
        jj_consume_token(floatToken);
        break;
      case ifToken:
        jj_consume_token(ifToken);
        break;
      case elseToken:
        jj_consume_token(elseToken);
        break;
      case whileToken:
        jj_consume_token(whileToken);
        break;
      case trueToken:
        jj_consume_token(trueToken);
        break;
      case falseToken:
        jj_consume_token(falseToken);
        break;
      case thisToken:
        jj_consume_token(thisToken);
        break;
      case newToken:
        jj_consume_token(newToken);
        break;
      case soutToken:
        jj_consume_token(soutToken);
        break;
      case openedBraceToken:
        jj_consume_token(openedBraceToken);
        break;
      case closedBraceToken:
        jj_consume_token(closedBraceToken);
        break;
      case openedParenthesisToken:
        jj_consume_token(openedParenthesisToken);
        break;
      case closedParenthesisToken:
        jj_consume_token(closedParenthesisToken);
        break;
      case openedCurlyBracketsToken:
        jj_consume_token(openedCurlyBracketsToken);
        break;
      case closedCurlyBracketsToken:
        jj_consume_token(closedCurlyBracketsToken);
        break;
      case semiColonToken:
        jj_consume_token(semiColonToken);
        break;
      case equalsToken:
        jj_consume_token(equalsToken);
        break;
      case realConstToken:
        jj_consume_token(realConstToken);
        break;
      case intConstToken:
        jj_consume_token(intConstToken);
        break;
      case andToken:
        jj_consume_token(andToken);
        break;
      case orToken:
        jj_consume_token(orToken);
        break;
      case lessThanToken:
        jj_consume_token(lessThanToken);
        break;
      case moreThanToken:
        jj_consume_token(moreThanToken);
        break;
      case lessOrEqualThanToken:
        jj_consume_token(lessOrEqualThanToken);
        break;
      case moreOrEqualThanToken:
        jj_consume_token(moreOrEqualThanToken);
        break;
      case plusToken:
        jj_consume_token(plusToken);
        break;
      case minusToken:
        jj_consume_token(minusToken);
        break;
      case multiplicationToken:
        jj_consume_token(multiplicationToken);
        break;
      case divisionToken:
        jj_consume_token(divisionToken);
        break;
      case dotToken:
        jj_consume_token(dotToken);
        break;
      case notToken:
        jj_consume_token(notToken);
        break;
      case idToken:
        jj_consume_token(idToken);
        break;
      default:
        jj_la1[0] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case classToken:
      case publicToken:
      case staticToken:
      case voidToken:
      case mainToken:
      case stringToken:
      case returnToken:
      case extendsToken:
      case intToken:
      case booleanToken:
      case floatToken:
      case ifToken:
      case elseToken:
      case whileToken:
      case trueToken:
      case falseToken:
      case thisToken:
      case newToken:
      case soutToken:
      case openedBraceToken:
      case closedBraceToken:
      case openedParenthesisToken:
      case closedParenthesisToken:
      case openedCurlyBracketsToken:
      case closedCurlyBracketsToken:
      case semiColonToken:
      case equalsToken:
      case andToken:
      case orToken:
      case lessThanToken:
      case moreThanToken:
      case lessOrEqualThanToken:
      case moreOrEqualThanToken:
      case plusToken:
      case minusToken:
      case multiplicationToken:
      case divisionToken:
      case dotToken:
      case notToken:
      case idToken:
      case realConstToken:
      case intConstToken:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
    }
    jj_consume_token(0);
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public AnalyzerTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[2];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0xfffffe00,0xfffffe00,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x7ffff,0x7ffff,};
   }

  /** Constructor with InputStream. */
  public Analyzer(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Analyzer(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new AnalyzerTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Analyzer(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new AnalyzerTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Analyzer(AnalyzerTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(AnalyzerTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List jj_expentries = new java.util.ArrayList();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[57];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 2; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 57; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
