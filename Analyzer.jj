options {Ignore_Case = false;}
PARSER_BEGIN(Analyzer)

public class Analyzer{
    public static void main (String args[]) throws ParseException{
        Analyzer miniJavaAnalizer=new Analyzer(System.in);
        miniJavaAnalizer.analyzingInput();
    }
}

PARSER_END(Analyzer)

SKIP:{" " | "\n" | "\t" | "\r"}

SKIP :{< "//" (~["\r", "\n"])* >}

SKIP:{ < "/*" > : mlComment}

<mlComment>SKIP :
{
  < "*/" > : DEFAULT
}

<mlComment> MORE:
{
  <~[]>
}

//Tokens
//----------------------------------------------------
//Reserved words
//----------------------------------------------------
TOKEN: {
    <classToken: "class">
    {System.out.println("Palabra reservada class");} 
}

TOKEN: {
    <publicToken: "public">
    {System.out.println("Palabra reservada public");} 
}

TOKEN: {
    <staticToken: "static">
    {System.out.println("Palabra reservada static");} 
}

TOKEN: {
    <voidToken: "void">
    {System.out.println("Palabra reservada void");} 
}

TOKEN: {
    <mainToken: "main">
    {System.out.println("Palabra reservada main");}
}


TOKEN: {
    <stringToken: "String">
    {System.out.println("Palabra reservada String");} 
} 

TOKEN: {
    <returnToken: "return">
    {System.out.println("Palabra reservada return");} 
}

TOKEN: {
    <extendsToken: "extends">
    {System.out.println("Palabra reservada extends");} 
}

TOKEN: {
    <intToken: "int">
    {System.out.println("Palabra reservada int");} 
}

TOKEN: {
    <booleanToken: "boolean">
    {System.out.println("Palabra reservada boolean");} 
}

TOKEN: {
    <floatToken: "float">
    {System.out.println("Palabra reservada float");} 
}

TOKEN: {
    <ifToken: "if">
    {System.out.println("Palabra reservada  if");} 
}

TOKEN: {
    <elseToken: "else">
    {System.out.println("Palabra reservada else");} 
}

TOKEN: {
    <whileToken: "while">
    {System.out.println("Palabra reservada while");} 
}

TOKEN: {
    <trueToken: "true">
    {System.out.println("Palabra reservada true");} 
}

TOKEN: {
    <falseToken: "false">
    {System.out.println("Palabra reservada false");} 
}

TOKEN: {
    <thisToken: "this">
    {System.out.println("Palabra reservada this");} 
}

TOKEN: {
    <newToken: "new">
    {System.out.println("Palabra reservada new");} 
}

TOKEN: {
    <soutToken: "System.out.println">
    {System.out.println("Palabra reservada System.out.println");} 
}

//Grouping symbols
//----------------------------------------------------
TOKEN: {
    <openedBraceToken: "[">
    {System.out.println("Agrupamiento [");} 
}

TOKEN: {
    <closedBraceToken: "]">
    {System.out.println("Agrupamiento ]");} 
}

TOKEN: {
    <openedParenthesisToken: "(">
    {System.out.println("Agrupamiento (");} 
}

TOKEN: {
    <closedParenthesisToken: ")">
    {System.out.println("Agrupamiento )");} 
}

TOKEN: {
    <openedCurlyBracketsToken: "{">
    {System.out.println("Agrupamiento {");} 
}

TOKEN: {
    <closedCurlyBracketsToken: "}">
    {System.out.println("Agrupamiento }");} 
}

TOKEN: {
    <semiColonToken: ";">
    {System.out.println("Agrupamiento ;");}
}

//Operator symbols
//----------------------------------------------------
TOKEN: {
    <equalsToken: "=">
    {System.out.println("Operador =");} 
}

TOKEN: {
    <andToken: "&&">
    {System.out.println("Operador &&");} 
}

TOKEN: {
    <orToken: "|">
    {System.out.println("Operador |");} 
}

TOKEN: {
    <lessThanToken: "<">
    {System.out.println("Operador <");} 
}

TOKEN: {
    <moreThanToken: ">">
    {System.out.println("Operador >");} 
}

TOKEN: {
    <lessOrEqualThanToken: "<=">
    {System.out.println("Operador <=");} 
}

TOKEN: {
    <moreOrEqualThanToken: ">=">
    {System.out.println("Operador >=");} 
}

TOKEN: {
    <plusToken: "+">
    {System.out.println("Operador +");} 
}

TOKEN: {
<minusToken: "-">
{System.out.println("Operador -");} 
}

TOKEN: {
    <multiplicationToken: "*">
    {System.out.println("Operador *");} 
}

TOKEN: {
<divisionToken: "/">
{System.out.println("Operador /");} 
}

TOKEN: {
    <dotToken: ".">
    {System.out.println("Operador .");} 
}

TOKEN: {
    <notToken: "!">
    {System.out.println("Operador !");} 
}

TOKEN: {
    <idToken: ((["a"-"z"]) | (["A"-"Z"]))
    ((["0"-"9"]){0,} | ("_"){0,} | (["a"-"z"]){0,} | (["A"-"Z"]){0,}){0,}>
    {System.out.println("Identificador: " + image);} 
}

//Real constants
//------------------------------------
TOKEN:{
    <realConstToken: (["0"-"9"] | (["1"-"9"](["0"-"9"]){0,10}))"."(["0"-"9"]){1,11}>
    {System.out.println("Constante real " + image);}
}

//Real ints
//------------------------------------
TOKEN:{
    <intConstToken: (["0"-"9"] | (["1"-"9"](["0"-"9"])+))>
    {System.out.println("Constante entera " + image);}
}

//Errors
//------------------------------------


/*this token catches wrong float numbers which follow the pattern: n (enters). 
 0 or more enters
 n is a number up to 11 digits
*/
SPECIAL_TOKEN:{
<floatWithoutAnythingAfterPoint:(["0"-"9"] | (["1"-"9"](["0"-"9"]){0,10}))(" ")*".">
{System.out.println("Error en la linea: " + matchedToken.beginLine + ", debido a un numero flotante mal construido: " + image );}
}

/*this token catches wrong float numbers which follow the pattern: . (enters) n
 0 or more enters
 n is a number up to 11 digits
*/

SPECIAL_TOKEN:{
<floatWithoutAnythingBeforePoint: "." (" ")* (["0"-"9"]){1,11}>
{System.out.println("Error en la linea: " + matchedToken.beginLine + ", debido a un numero flotante mal construido: " + image );}
}

/*this token catches wrong float numbers which follow the pattern: n (enters). (enters) n 
 n is a number up to 11 digits
*/
SPECIAL_TOKEN:{
<floatWithEntersBetweenDigits: (["0"-"9"] | (["1"-"9"](["0"-"9"]){0,10}))(" ")*"."(" ")*(["0"-"9"]){1,11}>
{System.out.println("Error en la linea: " + matchedToken.beginLine + ", debido a un numero flotante mal construido: " + image );}
}

/*this token catches wrong id's which starts with numbers instead of letters*/
SPECIAL_TOKEN:{
<iDStartsWithNumber: (["0"-"9"]){0,} <idToken>>
{System.out.println("Error en la linea: " + matchedToken.beginLine + ", el identificador " + image + " no debe inciar con un n√∫mero");}
}


SPECIAL_TOKEN:{
<iDContainsSpaces: 
((["a"-"z"]) | (["A"-"Z"]))(" ")*((["0"-"9"]){1,} | ("_"){1,} | (["a"-"z"]){1,} | (["A"-"Z"]){1,}){1,} | 
((["a"-"z"]) | (["A"-"Z"]))(" ")*((["0"-"9"]){1,} | ("_"){1,} | (["a"-"z"]){1,} | (["A"-"Z"]){1,}){1,}(" ")*((["0"-"9"]){1,} | ("_"){1,} | (["a"-"z"]){1,} | (["A"-"Z"]){1,}){1,}
>
{System.out.println("Error en la linea: " + matchedToken.beginLine + ", el identificador " + image + " no debe haber espacios en los identificadores");}
}


SPECIAL_TOKEN: {
    <errorSymbNotIdent: ~[] >
    {System.out.println("ERROR (Simbolo no identificado): " 
    + image + 
    " , en la linea: " + matchedToken.beginLine);}
}




void analyzingInput():{}
{
(<classToken> | <publicToken> | <staticToken> | <voidToken> | <mainToken> | <stringToken> | <returnToken> | <extendsToken> | <intToken> |
<booleanToken> | <floatToken> | <ifToken> | <elseToken> | <whileToken> | <trueToken> | <falseToken> | <thisToken> | <newToken> | <soutToken>
| <openedBraceToken> | <closedBraceToken> | <openedParenthesisToken> | <closedParenthesisToken> | <openedCurlyBracketsToken> | <closedCurlyBracketsToken> | <semiColonToken> | <equalsToken>
| <realConstToken> | <intConstToken> | <andToken> | <orToken> | <lessThanToken> | <moreThanToken> | <lessOrEqualThanToken> | <moreOrEqualThanToken> | <plusToken> | <minusToken> | <multiplicationToken>
| <divisionToken> | <dotToken> | <notToken> | <idToken>
) + <EOF>
}